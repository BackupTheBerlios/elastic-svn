diff -Naur libltdl.orig/ltdl.c libltdl/ltdl.c
--- libltdl.orig/ltdl.c	Sun Jan 23 21:56:25 2000
+++ libltdl/ltdl.c	Sun Feb 13 15:50:53 2000
@@ -3,6 +3,9 @@
    Originally by Thomas Tanner <tanner@ffii.org>
    This file is part of GNU Libtool.
 
+   Modifications by Marco Pantaleoni. These are:
+   Copyright (C) 2000 Marco Pantaleoni.
+
 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Library General Public
 License as published by the Free Software Foundation; either
@@ -73,6 +76,26 @@
 #define LTDL_READTEXT_MODE "r"
 #endif
 
+/*
+ * Changes by Marco Pantaleoni to better support Win32
+ * on Mingw32 and MSVC compilers.
+ */
+#ifdef WIN32
+#define LTDL_PATHSEP	'\\'
+#define LTDL_PATHSEP_S	"\\"
+#define LTDL_ENVSEP		';'
+#define LTDL_ENVSEP_S	";"
+#define LTDL_CURDIR		'.'
+#define LTDL_CURDIR_S	"."
+#else
+#define LTDL_PATHSEP	'/'
+#define LTDL_PATHSEP_S	"/"
+#define LTDL_ENVSEP		':'
+#define LTDL_ENVSEP_S	":"
+#define LTDL_CURDIR		'.'
+#define LTDL_CURDIR_S	"."
+#endif
+
 #undef	LTDL_SYMBOL_LENGTH
 /* This is the maximum symbol size that won't require malloc/free */
 #define LTDL_SYMBOL_LENGTH	128
@@ -496,7 +519,7 @@
 		strcpy(searchname, filename);
 		strcat(searchname, ".");
 	}
-    
+
 	handle->handle = LoadLibrary(searchname);
 	lt_dlfree(searchname);
 	
@@ -896,7 +919,7 @@
 				return 1;
 			}
 			strcpy(filename, libdir);
-			strcat(filename, "/");
+			strcat(filename, LTDL_PATHSEP_S);
 			strcat(filename, dlname);
 			error = tryall_dlopen(handle, filename) == 0;
 			lt_dlfree(filename);
@@ -962,11 +985,11 @@
 		int lendir;
 		const char *cur = next;
 
-		next = strchr(cur, ':');
+		next = strchr(cur, LTDL_ENVSEP);
 		if (!next)
 			next = cur + strlen(cur);
 		lendir = next - cur;
-		if (*next == ':')
+		if (*next == LTDL_ENVSEP)
 			++next;
 		else
 			next = 0;
@@ -983,8 +1006,8 @@
 			}
 		}
 		strncpy(filename, cur, lendir);
-		if (filename[lendir-1] != '/')
-			filename[lendir++] = '/';
+		if (filename[lendir-1] != LTDL_PATHSEP)
+			filename[lendir++] = LTDL_PATHSEP;
 		strcpy(filename+lendir, basename);
 		if (handle) {
 			if (tryall_dlopen(handle, filename) == 0) {
@@ -1097,7 +1120,7 @@
 		}
 		goto register_handle;
 	}
-	basename = strrchr(filename, '/');
+	basename = strrchr(filename, LTDL_PATHSEP);
 	if (basename) {
 		basename++;
 		dir = (char*) lt_dlmalloc(basename - filename + 1);
@@ -1468,13 +1491,13 @@
 	} else {
 		char	*new_search_path = (char*)
 			lt_dlmalloc(strlen(user_search_path) + 
-				strlen(search_dir) + 2); /* ':' + '\0' == 2 */
+				strlen(search_dir) + 2); /* LTDL_ENVSEP (unix: ':') + '\0' == 2 */
 		if (!new_search_path) {
 			last_error = memory_error;
 			return 1;
 		}
 		strcpy(new_search_path, user_search_path);
-		strcat(new_search_path, ":");
+		strcat(new_search_path, LTDL_ENVSEP_S);
 		strcat(new_search_path, search_dir);
 		lt_dlfree(user_search_path);
 		user_search_path = new_search_path;
